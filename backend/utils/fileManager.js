const fs = require('fs').promises;
const path = require('path');

class FileManager {
  constructor() {
    this.uploadsDir = path.join(__dirname, '../../uploads');
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà
  async createSubjectFolder(subjectName, className) {
    try {
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
      const cleanSubjectName = this.sanitizeFileName(subjectName);
      const cleanClassName = this.sanitizeFileName(className);
      const folderName = `${cleanClassName}_${cleanSubjectName}`;
      
      const subjectPath = path.join(this.uploadsDir, folderName);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å uploads ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      await fs.mkdir(this.uploadsDir, { recursive: true });
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤
      await fs.mkdir(subjectPath, { recursive: true });
      
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤: ${folderName}`);
      return folderName;
    } catch (error) {
      console.error('Error creating subject folder:', error);
      throw error;
    }
  }

  // ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async deleteSubjectFolder(subjectName, className) {
    try {
      const cleanSubjectName = this.sanitizeFileName(subjectName);
      const cleanClassName = this.sanitizeFileName(className);
      const folderName = `${cleanClassName}_${cleanSubjectName}`;
      
      const subjectPath = path.join(this.uploadsDir, folderName);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      try {
        await fs.access(subjectPath);
        // ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô
        await fs.rm(subjectPath, { recursive: true, force: true });
        console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤: ${folderName}`);
      } catch (error) {
        // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        console.log(`‚ö†Ô∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${folderName} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
      }
      
      return folderName;
    } catch (error) {
      console.error('Error deleting subject folder:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô_‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•_‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô.extension
  generateFileName(studentId, studentName, assignmentTitle, originalFileName) {
    try {
      // ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
      const extension = path.extname(originalFileName);
      
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
      const cleanStudentName = this.sanitizeFileName(studentName);
      const cleanAssignmentTitle = this.sanitizeFileName(assignmentTitle);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
      const fileName = `${studentId}_${cleanStudentName}_${cleanAssignmentTitle}${extension}`;
      
      return fileName;
    } catch (error) {
      console.error('Error generating file name:', error);
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
      const extension = path.extname(originalFileName);
      return `${studentId}_${Date.now()}${extension}`;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  async createAssignmentFolder(subjectName, className, assignmentTitle) {
    try {
      const cleanSubjectName = this.sanitizeFileName(subjectName);
      const cleanClassName = this.sanitizeFileName(className);
      const cleanAssignmentTitle = this.sanitizeFileName(assignmentTitle);
      
      const subjectFolderName = `${cleanClassName}_${cleanSubjectName}`;
      const assignmentFolderPath = path.join(this.uploadsDir, subjectFolderName, cleanAssignmentTitle);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô (‡∏£‡∏ß‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
      await fs.mkdir(assignmentFolderPath, { recursive: true });
      
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô: ${subjectFolderName}/${cleanAssignmentTitle}`);
      return {
        subjectFolder: subjectFolderName,
        assignmentFolder: cleanAssignmentTitle,
        fullPath: assignmentFolderPath
      };
    } catch (error) {
      console.error('Error creating assignment folder:', error);
      throw error;
    }
  }

  // ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async deleteAssignmentFolder(subjectName, className, assignmentTitle) {
    try {
      const cleanSubjectName = this.sanitizeFileName(subjectName);
      const cleanClassName = this.sanitizeFileName(className);
      const cleanAssignmentTitle = this.sanitizeFileName(assignmentTitle);
      
      const subjectFolderName = `${cleanClassName}_${cleanSubjectName}`;
      const assignmentFolderPath = path.join(this.uploadsDir, subjectFolderName, cleanAssignmentTitle);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      try {
        await fs.access(assignmentFolderPath);
        // ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô
        await fs.rm(assignmentFolderPath, { recursive: true, force: true });
        console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô: ${subjectFolderName}/${cleanAssignmentTitle}`);
      } catch (error) {
        // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        console.log(`‚ö†Ô∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô ${subjectFolderName}/${cleanAssignmentTitle} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
      }
      
      return {
        subjectFolder: subjectFolderName,
        assignmentFolder: cleanAssignmentTitle
      };
    } catch (error) {
      console.error('Error deleting assignment folder:', error);
      throw error;
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  async saveFile(buffer, fileName, subjectName, className, assignmentTitle) {
    try {
      const cleanSubjectName = this.sanitizeFileName(subjectName);
      const cleanClassName = this.sanitizeFileName(className);
      const cleanAssignmentTitle = this.sanitizeFileName(assignmentTitle);
      
      const subjectFolderName = `${cleanClassName}_${cleanSubjectName}`;
      const assignmentFolderPath = path.join(this.uploadsDir, subjectFolderName, cleanAssignmentTitle);
      const filePath = path.join(assignmentFolderPath, fileName);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
      await fs.mkdir(assignmentFolderPath, { recursive: true });
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
      await fs.writeFile(filePath, buffer);
      
      console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: ${fileName} ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${subjectFolderName}/${cleanAssignmentTitle}`);
      
      return {
        fileName,
        subjectFolder: subjectFolderName,
        assignmentFolder: cleanAssignmentTitle,
        relativePath: path.join(subjectFolderName, cleanAssignmentTitle, fileName).replace(/\\/g, '/'), // ‡πÉ‡∏ä‡πâ / ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL
        fullPath: filePath
      };
    } catch (error) {
      console.error('Error saving file:', error);
      throw error;
    }
  }

  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå/‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÄ‡∏≠‡∏≤‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏≠‡∏Å)
  sanitizeFileName(name) {
    return name
      .replace(/[<>:"/\\|?*]/g, '') // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å
      .replace(/\s+/g, '-') // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô -
      .trim(); // ‡πÄ‡∏≠‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å
  }

  // ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô
  async getAssignmentFiles(subjectName, className, assignmentTitle) {
    try {
      const cleanSubjectName = this.sanitizeFileName(subjectName);
      const cleanClassName = this.sanitizeFileName(className);
      const cleanAssignmentTitle = this.sanitizeFileName(assignmentTitle);
      
      const subjectFolderName = `${cleanClassName}_${cleanSubjectName}`;
      const assignmentFolderPath = path.join(this.uploadsDir, subjectFolderName, cleanAssignmentTitle);
      
      try {
        const files = await fs.readdir(assignmentFolderPath);
        return files.map(file => ({
          fileName: file,
          subjectFolder: subjectFolderName,
          assignmentFolder: cleanAssignmentTitle,
          relativePath: path.join(subjectFolderName, cleanAssignmentTitle, file).replace(/\\/g, '/')
        }));
      } catch (error) {
        // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        return [];
      }
    } catch (error) {
      console.error('Error getting assignment files:', error);
      return [];
    }
  }

  // ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  async getSubjectFiles(subjectName, className) {
    try {
      const cleanSubjectName = this.sanitizeFileName(subjectName);
      const cleanClassName = this.sanitizeFileName(className);
      const folderName = `${cleanClassName}_${cleanSubjectName}`;
      
      const subjectPath = path.join(this.uploadsDir, folderName);
      
      try {
        const items = await fs.readdir(subjectPath, { withFileTypes: true });
        const allFiles = [];
        
        for (const item of items) {
          if (item.isDirectory()) {
            // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏á‡∏≤‡∏ô - ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô
            const assignmentFiles = await this.getAssignmentFiles(subjectName, className, item.name);
            allFiles.push(...assignmentFiles);
          } else {
            // ‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
            allFiles.push({
              fileName: item.name,
              subjectFolder: folderName,
              assignmentFolder: null,
              relativePath: path.join(folderName, item.name).replace(/\\/g, '/')
            });
          }
        }
        
        return allFiles;
      } catch (error) {
        // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        return [];
      }
    } catch (error) {
      console.error('Error getting subject files:', error);
      return [];
    }
  }
}

module.exports = new FileManager();